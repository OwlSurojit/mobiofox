"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/building_a_plugin/guides.html#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""

from typing import TYPE_CHECKING

import dask.array as da
import napari.layers
import napari.viewer
from magicgui.widgets import (
    CheckBox,
    Container,
    Label,
    RangeSlider,
    create_widget,
)
from qtpy.QtCore import QTimer
from skimage.util import img_as_float

if TYPE_CHECKING:
    import napari


class CropWidget(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer

        self._input_image_picker = create_widget(
            label="Input Data", annotation="napari.layers.Image"
        )
        self._crop_around_sample_checkbox = CheckBox(
            text="Automatically crop around the sample"
        )
        self._crop_top_bottom = RangeSlider(
            min=0, max=1, value=(0, 1), label="Crop top/bottom of the sample"
        )

        self._debounce_timer = QTimer()
        self._debounce_timer.setSingleShot(True)
        self._debounce_timer.timeout.connect(self._crop)

        self._input_changed()

        self._input_image_picker.changed.connect(self._input_changed)
        self._crop_around_sample_checkbox.changed.connect(self._crop)
        self._crop_top_bottom.changed.connect(self._start_debounce_timer)

        self.extend(
            [
                self._input_image_picker,
                self._crop_around_sample_checkbox,
                self._crop_top_bottom,
            ]
        )

    def _input_changed(self):
        image_layer = self._input_image_picker.value
        if image_layer is None:
            return

        image_data = image_layer.data

        # Update the crop range based on the image data
        self._crop_top_bottom.max = image_data.shape[0] - 1
        self._crop_top_bottom.value = (0, image_data.shape[0] - 1)

        self._rechunked_data = da.rechunk(
            image_layer.data,
            chunks=(1, image_data.shape[1], image_data.shape[2]),
        )

        cropped_layer_name = image_layer.name + "_cropped"
        if cropped_layer_name not in self._viewer.layers:
            self._viewer.add_image(
                self._rechunked_data, name=cropped_layer_name
            )
            # TODO hide the original image layer?
        self._cropped_layer = self._viewer.layers[cropped_layer_name]

    def _start_debounce_timer(self):
        """Start or restart the debounce timer."""
        self._debounce_timer.start(300)

    def _crop(self):
        image_layer = self._input_image_picker.value
        if image_layer is None:
            return

        crop_range = self._crop_top_bottom.value
        # mask = (slice(crop_range[0], crop_range[1]), slice(None), slice(None))

        if self._cropped_layer is not None:
            self._cropped_layer.data = self._rechunked_data[
                crop_range[0] : crop_range[1]
            ]
            # self._cropped_layer.data = image_layer.data[mask]


class MorphometryPipelineWidget(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer

        # Caching intermediate steps
        self._input_image = None
        self._cropped = None
        self._filtered = None
        self._segmented = None

        # Step 1: Crop
        self.crop_widget = CropWidget(viewer)

        self.extend([Label(label="Step 1:", value="Crop"), self.crop_widget])


# if we want even more control over our widget, we can use
# magicgui `Container`
class ImageThreshold(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        # use create_widget to generate widgets from type annotations
        self._image_layer_combo = create_widget(
            label="Image", annotation="napari.layers.Image"
        )
        self._threshold_slider = create_widget(
            label="Threshold", annotation=float, widget_type="FloatSlider"
        )
        self._threshold_slider.min = 0
        self._threshold_slider.max = 1
        # use magicgui widgets directly
        self._invert_checkbox = CheckBox(text="Keep pixels below threshold")

        # connect your own callbacks
        self._threshold_slider.changed.connect(self._threshold_im)
        self._invert_checkbox.changed.connect(self._threshold_im)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._image_layer_combo,
                self._threshold_slider,
                self._invert_checkbox,
            ]
        )

    def _threshold_im(self):
        image_layer = self._image_layer_combo.value
        if image_layer is None:
            return

        image = img_as_float(image_layer.data)
        name = image_layer.name + "_thresholded"
        threshold = self._threshold_slider.value
        if self._invert_checkbox.value:
            thresholded = image < threshold
        else:
            thresholded = image > threshold
        if name in self._viewer.layers:
            self._viewer.layers[name].data = thresholded
        else:
            self._viewer.add_labels(thresholded, name=name)
